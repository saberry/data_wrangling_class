---
title: "Visualization"
format:
  html:
    toc: true
    toc-location: left
    theme: vapor
    highlight-style: breeze
    self-contained: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

# Using ggplot2

The `ggplot2` package is likely one of R's greatest strengths. It is a powerful and flexible package for creating visualizations. It is based on the grammar of graphics, which is a way of thinking about visualizations that allows you to build plots layer by layer. This allows you to create complex visualizations that are still easy to understand. Fortunately, it is also relatively easy to learn; this is especially true, given the cumbersome nature of R's base plots.

## Helpful Resources

There are two places that I would direct you to for the best help on ggplot2:

The <a href="http://www.cookbook-r.com/Graphs/">plots cookbook</a> is an absolute classic when it comes to learning how to adjust elements within your visualization (e.g., axes, legends, text, etc.). Outside of plotting, it has great general R information. 

Claus Wilke's <a href="https://clauswilke.com/dataviz/">Fundamentals of Data Visualization</a> is excellent. It has literally everything you need to create just about any visualization you want. I would use it as your primary reference for ggplot2 visualizations. 

Let's build a visualization using some data about train accidents. 

```{r}
trains <- read.csv(
  "C:/Users/sberry5/Documents/teaching/data_wrangling_class/data/Rail_Equipment_Accident_Incident_Data.csv"
  )
```

## Scatterplots

Let's start by creating a scatterplot of the number of injuries and fatalities in each accident. We'll use the `geom_point()` function to create the scatterplot. We'll also use the `theme_minimal()` function to make the background white.

```{r}
library(ggplot2)
  # The following line establishes the base layer, 
  # which is the data and the variables we want to plot.
ggplot(trains, aes(x = Total.Persons.Injured, y = Total.Persons.Killed)) +
  # The following line adds the points to the plot.
  geom_point() +
  # The following line makes the background white
  # and minimizes the grid lines.
  theme_minimal()
```

Whenever you've got an axis that has a huge range and goes pretty far out, it's a good idea to use a log scale. Let's do that here. We'll use the `scale_x_log10()` and `scale_y_log10()` functions to do this.

```{r}
ggplot(trains, aes(x = Total.Persons.Injured, y = Total.Persons.Killed)) +
  geom_point() +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10()
```

You could also just wrap the `log()` function around the variable in the `aes()` function. This will create a log scale for that variable.

Now that we are satisfied with the way that our visualization looks, we can assign it a name:

```{r}
accidents_deaths_plot <- ggplot(
    trains, aes(x = Total.Persons.Injured, y = Total.Persons.Killed)
    ) +
  geom_point() +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10()
```

Now that we have it named, we can just reference that name and continue adding layers to it. There is no reason to constantly be recomputing the base layers once you have them where you want them.

Let's add a title and labels to the axes. We'll use the `labs()` function to do this. We'll also use the `theme()` function to change the size of the axis labels.

```{r}
accidents_deaths_plot <- accidents_deaths_plot +
  labs(title = "Train Accidents",
       x = "Total Injuries",
       y = "Total Fatalities") 

accidents_deaths_plot
```

Finally, let's add a linear regression line to that plot. There are a few ways to do it, but let's get lazy and use the `geom_smooth` function with an `lm` method:

```{r}
accidents_deaths_plot + 
    geom_smooth(method = "lm")
```

That's not too exciting, so let's add just a normal smooth line to the visualization:

```{r}
accidents_deaths_plot + 
    geom_smooth()
```

Let's add one more feature to our data. We want to see if having engineers on duty has any influence on the number of injuries and fatalities. We'll add it as a color.

```{r}
ggplot(
    trains, aes(x = Total.Persons.Injured, 
                y = Total.Persons.Killed, 
                color = Engineers.On.Duty)
    ) +
  geom_point(size = 2, alpha = .5) +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10()
```

One of the handiest things about ggplot is that you can put multiple data sets into a plot. Typically, you will include the data within the geoms, as opposed to the `ggplot()` function:

```{r}
ggplot() + 
    geom_point(data = trains, mapping = aes(x = Total.Persons.Injured, 
                                          y = Total.Persons.Killed),
             size = 2, alpha = .5) +
    theme_minimal()
```

Either way, there is a ton of flexibility in how you can use ggplot.

## Changing Colors

There are a lot of colors that you can use, but they will always map to the variables that are using the colors. The Brewer colors are great and it is usually worth just using the distiller variants of those scales.

```{r}
ggplot(trains, 
       aes(x = Total.Persons.Injured, 
           y = Total.Persons.Killed, 
           color = Engineers.On.Duty)) +
  geom_point(size = 2, alpha = .5) +
  scale_color_distiller(type = "seq", palette = "Reds") +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10()
```

```{r}
ggplot(trains, 
       aes(x = Total.Persons.Injured, 
           y = Total.Persons.Killed, 
           color = Accident.Type)) +
  geom_point(size = 2, alpha = .5) +
  scale_color_brewer(type = "qual", palette = "Set3") +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10()
```

For something like that, it might be worth flipping it to dark mode with `ggdark`:

```{r}
library(ggdark)

ggplot(trains, 
       aes(x = Total.Persons.Injured, 
           y = Total.Persons.Killed, 
           color = Accident.Type)) +
  geom_point(size = 2, alpha = .5) +
  scale_color_brewer(type = "qual", palette = "Set3") +
  dark_theme_minimal() +
  scale_x_log10() +
  scale_y_log10()
```

Just be sure to flip back to normal mode!

```{r}
ggdark::invert_geom_defaults()
```

You can also use your own custom colors with scale_color_manual. I would, however, be cautious in using your own colors -- the Brewer colors have a demonstrated ability to work for visualizations and your own colors might not. Unless you've studied some color theory, probably best to leave it people who have.

## Combining Plots

At one point, putting two plots in the same space was a hassle. Now, though, the `patchwork` package handles it with ease!

```{r}
library(patchwork)

viz_1  <- ggplot(trains, aes(x = Total.Persons.Injured, y = Train.Speed)) +
  geom_point() +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "Total Injuries",
       y = "Train Speed")

viz_2  <- ggplot(trains, aes(x = Total.Persons.Killed, y = Train.Speed)) +
  geom_point() +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "Total Injuries",
       y = "Train Speed")

viz_1 + viz_2
```

That looks a bit rough when it is side-by-side, so let's flip it:

```{r}
viz_1 / viz_2
```

## Barplots

Let's create a barplot of the number of accidents by state. We'll use the `geom_bar()` function to create the barplot.

```{r}
ggplot(trains, aes(x = State.Abbreviation)) +
  geom_bar()
```

That's gross, so let's make it horizontal:

```{r}
ggplot(trains, aes(x = State.Abbreviation)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

You can also use color to `fill` bars:

```{r}
ggplot(trains, aes(x = Accident.Type, fill = Accident.Type)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

That's probably not the best use of color, but you'll find plenty of places to use it.

## Boxplots

Let's create a boxplot of the train speeds by state. We'll use the `geom_boxplot()` function to create the boxplot.

```{r}
ggplot(trains, 
    aes(x = State.Abbreviation, y = Train.Speed, group = State.Abbreviation)) +
  geom_boxplot() +
  coord_flip() +
  theme_minimal()
```

## Histograms

Let's create a histogram of the train speeds. We'll use the `geom_histogram()` function to create the histogram.

```{r}
ggplot(trains, aes(x = Train.Speed)) +
  geom_histogram() +
  theme_minimal()
```

## Density Plots

Let's create a density plot of the train speeds. We'll use the `geom_density()` function to create the density plot.

```{r}
ggplot(trains, aes(x = Train.Speed)) +
  geom_density() +
  theme_minimal()
```

You can also use density plots over different groups:

```{r}
ggplot(trains, aes(x = Train.Speed, fill = Accident.Type)) +
  geom_density(alpha = .5) +
  theme_minimal()
```

If you have just a few groups, those are great. Since we have a lot of groups, though, we can use a ridgeline plot:

```{r}
library(ggridges)

ggplot(trains, aes(x = Train.Speed, y = Accident.Type, fill = Accident.Type)) +
  geom_density_ridges2() +
  theme_minimal()
```

That color isn't offering much there, map a color to the x-axis variable:

```{r}
ggplot(trains, aes(x = Train.Speed, y = Accident.Type, fill = after_stat(x))) +
  geom_density_ridges_gradient() +
  theme_minimal()
```

## Heat Maps

Let's create a heat map of the train speeds by accident type. We'll use the `geom_tile()` function to create the heat map.

Typically, you'll need to do some group and summarizing to make nice heatplots.

```{r}
heat_data <- aggregate(trains$Train.Speed, 
                       by = list(type = trains$Accident.Type, 
                                 state = trains$State.Abbreviation), 
                       mean)

ggplot(heat_data, aes(x = type, y = state, fill = x)) +
  geom_tile() +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```

Notice that I also adjusted the angle of the x-axis labels. They would have smashed into each other if they were not rotated.

## Correlogram

One way to extend a heat map is to use the same idea, but toss a correlation matrix into the plot. 

Let's pick out a few numeric variables:

```{r}
numeric_vars <- c("Total.Persons.Killed", "Total.Persons.Injured", 
                  "Train.Speed", "Hazmat.Cars", "Positive.Drug.Tests",
                  "Positive.Alcohol.Tests", "Loaded.Freight.Cars", 
                  "Loaded.Passenger.Cars", "Cabooses", 
                  "Engineers.On.Duty", "Firemen.On.Duty", 
                  "Conductors.On.Duty", "Brakemen.On.Duty")

cor_data <- trains[, numeric_vars]
```


If we just look at the correlation matrix, we see that we have a significant number of values to sift through (even with a handful of variables):

```{r}
train_corrs <- cor(cor_data, use = "pairwise.complete.obs")

train_corrs
```

There are tons of packages for doing this and you can even do it in ggplot2 without much hassle. Likely the nicest method out there comes from the `corrr` package.

```{r}
library(corrr)

train_corrs <- shave(correlate(cor_data))

rplot(train_corrs, print_cor = TRUE)
```


## Faceting

Let's plot train speed and total fatalities by accident type. We'll use the `facet_wrap()` function to create the facets.

```{r}
ggplot(trains, aes(x = Train.Speed, y = Total.Persons.Killed)) +
  geom_point() +
  facet_wrap(vars(Accident.Type)) +
  theme_minimal()
```

If you are poking around and see someone using the tilde form of facet_wrap -- `facet_wrap(~Accident.Type)` -- just know that it works, but is no longer the preferred way of doing it.

## Time

Let's plot the date of each accident and speed. If you want your date to make sense, then it has to be recognized as an actual date. We'll use the `mdy()` function from the `lubridate` package to do this. We'll also use the `geom_line()` function to create the line plot.

```{r}
ggplot(head(trains, 100), 
    aes(x = lubridate::mdy(Date), Train.Speed)) + 
    geom_point() +
    geom_line() +
    theme_minimal()
```

## Animation

One of the coolest things that you can do is to animate your plots:

```{r}
library(gganimate)
library(gifski)
library(tweenr)

ggplot(trains, aes(x = Train.Speed, y = Total.Persons.Killed)) +
  geom_point() +
  labs(title = "{closest_state}") +
  transition_states(Accident.Type, transition_length = 2, state_length = 1) +
  theme_minimal()
```

```{r}
ggplot(head(trains, 1000), 
    aes(x = lubridate::mdy(Date), Train.Speed))+
  geom_line() +
  transition_reveal(lubridate::mdy(Date)) +
  theme_minimal()
```

