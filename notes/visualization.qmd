---
title: "Visualization"
format:
  html:
    toc: true
    toc-location: left
    theme: vapor
    highlight-style: breeze
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

# Using ggplot2

The `ggplot2` package is likely one of R's greatest strengths. It is a powerful and flexible package for creating visualizations. It is based on the grammar of graphics, which is a way of thinking about visualizations that allows you to build plots layer by layer. This allows you to create complex visualizations that are still easy to understand. Fortunately, it is also relatively easy to learn; this is especially true, given the cumbersome nature of R's base plots.

Let's build a visualization using some data about train accidents. 

```{r}
trains <- read.csv("data/Rail_Equipment_Accident_Incident_Data.csv")
```

## Scatterplots

Let's start by creating a scatterplot of the number of injuries and fatalities in each accident. We'll use the `geom_point()` function to create the scatterplot. We'll also use the `theme_minimal()` function to make the background white.

```{r}
library(ggplot2)
  # The following line establishes the base layer, 
  # which is the data and the variables we want to plot.
ggplot(trains, aes(x = Total.Persons.Injured, y = Total.Persons.Killed)) +
  # The following line adds the points to the plot.
  geom_point() +
  # The following line makes the background white
  # and minimizes the grid lines.
  theme_minimal()
```

Whenever you've got an axis that has a huge range and goes pretty far out, it's a good idea to use a log scale. Let's do that here. We'll use the `scale_x_log10()` and `scale_y_log10()` functions to do this.

```{r}
ggplot(trains, aes(x = Total.Persons.Injured, y = Total.Persons.Killed)) +
  geom_point() +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10()
```

You could also just wrap the `log()` function around the variable in the `aes()` function. This will create a log scale for that variable.

Now that we are satisfied with the way that our visualization looks, we can assign it a name:

```{r}
accidents_deaths_plot <- ggplot(
    trains, aes(x = Total.Persons.Injured, y = Total.Persons.Killed)
    ) +
  geom_point() +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10()
```

Now that we have it named, we can just reference that name and continue adding layers to it. There is no reason to constantly be recomputing the base layers once you have them where you want them.

Let's add a title and labels to the axes. We'll use the `labs()` function to do this. We'll also use the `theme()` function to change the size of the axis labels.

```{r}
accidents_deaths_plot <- accidents_deaths_plot +
  labs(title = "Train Accidents",
       x = "Total Injuries",
       y = "Total Fatalities") 

accidents_deaths_plot
```

Finally, let's add a linear regression line to that plot. There are a few ways to do it, but let's get lazy and use the `geom_smooth` function with an `lm` method:

```{r}
accidents_deaths_plot + 
    geom_smooth(method = "lm")
```

That's not too exciting, so let's add just a normal smooth line to the visualization:

```{r}
accidents_deaths_plot + 
    geom_smooth()
```

Let's add one more feature to our data. We want to see if having engineers on duty has any influence on the number of injuries and fatalities. We'll add it as a color.

```{r}
ggplot(
    trains, aes(x = Total.Persons.Injured, 
                y = Total.Persons.Killed, 
                color = Engineers.On.Duty)
    ) +
  geom_point(size = 2, alpha = .5) +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10()
```

One of the handiest things about ggplot is that you can put multiple data sets into a plot. Typically, you will include the data within the geoms, as opposed to the `ggplot()` function:

```{r}
ggplot() + 
    geom_point(data = trains, mapping = aes(x = Total.Persons.Injured, 
                                          y = Total.Persons.Killed),
             size = 2, alpha = .5) +
    theme_minimal()
```

Either way, there is a ton of flexibility in how you can use ggplot.

## Combining Plots

At one point, putting two plots in the same space was a hassle. Now, though, the `patchwork` package handles it with ease!

```{r}
library(patchwork)

viz_1  <- ggplot(trains, aes(x = Total.Persons.Injured, y = Train.Speed)) +
  geom_point() +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "Total Injuries",
       y = "Train Speed")

viz_2  <- ggplot(trains, aes(x = Total.Persons.Killed, y = Train.Speed)) +
  geom_point() +
  theme_minimal() +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "Total Injuries",
       y = "Train Speed")

viz_1 + viz_2
```

That looks a bit rough when it is side-by-side, so let's flip it:

```{r}
viz_1 / viz_2
```

## Barplots

Let's create a barplot of the number of accidents by state. We'll use the `geom_bar()` function to create the barplot.

```{r}
ggplot(trains, aes(x = State.Abbreviation)) +
  geom_bar()
```

That's gross, so let's make it horizontal:

```{r}
ggplot(trains, aes(x = State.Abbreviation)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

## Boxplots

Let's create a boxplot of the train speeds by state. We'll use the `geom_boxplot()` function to create the boxplot.

```{r}
ggplot(trains, 
    aes(x = State.Abbreviation, y = Train.Speed, group = State.Abbreviation)) +
  geom_boxplot() +
  coord_flip() +
  theme_minimal()
```

## Histograms

Let's create a histogram of the train speeds. We'll use the `geom_histogram()` function to create the histogram.

```{r}
ggplot(trains, aes(x = Train.Speed)) +
  geom_histogram() +
  theme_minimal()
```

## Density Plots

Let's create a density plot of the train speeds. We'll use the `geom_density()` function to create the density plot.

```{r}
ggplot(trains, aes(x = Train.Speed)) +
  geom_density() +
  theme_minimal()
```

## Heat Maps

Let's create a heat map of the train speeds by accident type. We'll use the `geom_tile()` function to create the heat map.

```{r}
ggplot(trains, aes(x = Accident.Type, y = Train.Speed)) +
  geom_tile() +
  coord_flip() +
  theme_minimal()
```

## Faceting

Let's plot train speed and total fatalities by accident type. We'll use the `facet_wrap()` function to create the facets.

```{r}
ggplot(trains, aes(x = Train.Speed, y = Total.Persons.Killed)) +
  geom_point() +
  facet_wrap(vars(Accident.Type)) +
  theme_minimal()
```

## Time

Let's plot the date of each accident and speed. If you want your date to make sense, then it has to be recognized as an actual date. We'll use the `mdy()` function from the `lubridate` package to do this. We'll also use the `geom_line()` function to create the line plot.

```{r}
ggplot(head(trains, 100), 
    aes(x = lubridate::mdy(Date), Train.Speed)) + 
    geom_point() +
    geom_line() +
    theme_minimal()
```

## Animation

One of the coolest things that you can do is to animate your plots:

```{r}
library(gganimate)
library(gifski)
library(tweenr)

ggplot(trains, aes(x = Train.Speed, y = Total.Persons.Killed)) +
  geom_point() +
  labs(title = "{closest_state}") +
  transition_states(Accident.Type, transition_length = 2, state_length = 1) +
  theme_minimal()
```